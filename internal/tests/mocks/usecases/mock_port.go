// Code generated by MockGen. DO NOT EDIT.
// Source: port.go

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/swallowarc/simple-line-ai-bot/internal/domain"
)

// MockCacheRepository is a mock of CacheRepository interface.
type MockCacheRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCacheRepositoryMockRecorder
}

// MockCacheRepositoryMockRecorder is the mock recorder for MockCacheRepository.
type MockCacheRepositoryMockRecorder struct {
	mock *MockCacheRepository
}

// NewMockCacheRepository creates a new mock instance.
func NewMockCacheRepository(ctrl *gomock.Controller) *MockCacheRepository {
	mock := &MockCacheRepository{ctrl: ctrl}
	mock.recorder = &MockCacheRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheRepository) EXPECT() *MockCacheRepositoryMockRecorder {
	return m.recorder
}

// DeleteChatMessages mocks base method.
func (m *MockCacheRepository) DeleteChatMessages(ctx context.Context, es domain.EventSource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChatMessages", ctx, es)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChatMessages indicates an expected call of DeleteChatMessages.
func (mr *MockCacheRepositoryMockRecorder) DeleteChatMessages(ctx, es interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChatMessages", reflect.TypeOf((*MockCacheRepository)(nil).DeleteChatMessages), ctx, es)
}

// ListChatMessages mocks base method.
func (m *MockCacheRepository) ListChatMessages(ctx context.Context, es domain.EventSource) (domain.ChatMessages, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChatMessages", ctx, es)
	ret0, _ := ret[0].(domain.ChatMessages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChatMessages indicates an expected call of ListChatMessages.
func (mr *MockCacheRepositoryMockRecorder) ListChatMessages(ctx, es interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChatMessages", reflect.TypeOf((*MockCacheRepository)(nil).ListChatMessages), ctx, es)
}

// SetChatMessages mocks base method.
func (m *MockCacheRepository) SetChatMessages(ctx context.Context, es domain.EventSource, cms domain.ChatMessages) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetChatMessages", ctx, es, cms)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetChatMessages indicates an expected call of SetChatMessages.
func (mr *MockCacheRepositoryMockRecorder) SetChatMessages(ctx, es, cms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetChatMessages", reflect.TypeOf((*MockCacheRepository)(nil).SetChatMessages), ctx, es, cms)
}

// MockOpenAIRepository is a mock of OpenAIRepository interface.
type MockOpenAIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOpenAIRepositoryMockRecorder
}

// MockOpenAIRepositoryMockRecorder is the mock recorder for MockOpenAIRepository.
type MockOpenAIRepositoryMockRecorder struct {
	mock *MockOpenAIRepository
}

// NewMockOpenAIRepository creates a new mock instance.
func NewMockOpenAIRepository(ctrl *gomock.Controller) *MockOpenAIRepository {
	mock := &MockOpenAIRepository{ctrl: ctrl}
	mock.recorder = &MockOpenAIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenAIRepository) EXPECT() *MockOpenAIRepositoryMockRecorder {
	return m.recorder
}

// ChatCompletion mocks base method.
func (m *MockOpenAIRepository) ChatCompletion(ctx context.Context, messages domain.ChatMessages) (domain.ChatMessages, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatCompletion", ctx, messages)
	ret0, _ := ret[0].(domain.ChatMessages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatCompletion indicates an expected call of ChatCompletion.
func (mr *MockOpenAIRepositoryMockRecorder) ChatCompletion(ctx, messages interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatCompletion", reflect.TypeOf((*MockOpenAIRepository)(nil).ChatCompletion), ctx, messages)
}
